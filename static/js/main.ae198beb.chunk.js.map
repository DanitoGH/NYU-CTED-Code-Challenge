{"version":3,"sources":["app/dashboard/components/DataCard.js","app/dashboard/Dashboard.js","app/App.js","serviceWorker.js","index.js"],"names":["DataCard","category","data","icon","iconColor","className","value","displayType","thousandSeparator","Dashboard","useState","setData","useEffect","fetchCovid19StatisticsData","a","options","method","url","params","code","headers","process","axios","request","then","res","catch","error","toast","message","position","autoClose","confirmed","recovered","critical","deaths","lastChange","Date","now","lastUpdate","calculateActiveCases","doughnutChartData","labels","datasets","backgroundColor","barGraphData","label","borderWidth","fill","responsive","maintainAspectRatio","segmentShowStroke","cutoutPercentage","elements","arc","legend","display","tooltips","enabled","format","scales","yAxes","ticks","beginAtZero","gridLines","color","xAxes","point","radius","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae198beb.chunk.js","sourcesContent":["import React from 'react';\r\nimport NumberFormat from 'react-number-format';\r\n\r\nconst DataCard = ({ category, data, icon, iconColor }) => {\r\n    return (\r\n        <div className=\"col-xl-3 col-sm-6 grid-margin stretch-card\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"row\">\r\n              <div className=\"col-9\">\r\n                <div className=\"d-flex align-items-center align-self-start\">\r\n                  <h3 className=\"mb-0\">\r\n                     <NumberFormat value={data} displayType={'text'} thousandSeparator={true} />\r\n                  </h3>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-3\">\r\n                <div className={iconColor}>\r\n                  <span className={icon}></span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <h6 className=\"text-muted font-weight-normal\">{category}</h6>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default DataCard;","import React, { useEffect, useState } from 'react';\nimport { Bar, Doughnut } from 'react-chartjs-2';\nimport axios from 'axios';\nimport NumberFormat from 'react-number-format';\nimport Moment from 'react-moment';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport DataCard from './components/DataCard';\n\nconst Dashboard = () =>  {\n  \n  const [data, setData] = useState([]);\n  const COUNTRY_CODE = 'gh';\n  \n  /**\n   * Fetch Ghana's current COVID-19 statistics data on page load  \n   */ \n  useEffect(() => {\n    fetchCovid19StatisticsData()\n  },[])\n   \n  const fetchCovid19StatisticsData = async() => {\n    var options = {\n      method: 'GET',\n      url: 'https://covid-19-data.p.rapidapi.com/country/code',\n      params: {code: COUNTRY_CODE},\n      headers: {\n        'x-rapidapi-host': `${process.env.REACT_APP_RAPID_API_HOST}`,\n        'x-rapidapi-key': `${process.env.REACT_APP_RAPID_API_KEY}`\n      }\n    };\n    await axios.request(options).then(function (res) {\n      setData(res.data[0])\n    }).catch(function (error) {\n      toast.error(error.message, {\n        position: \"bottom-right\",\n        autoClose: 5000\n      });\n    });\n  }\n\n  // Data destructuring with default values\n  const { confirmed = 0, recovered = 0, critical = 0, \n    deaths = 0, lastChange = Date.now(), lastUpdate = Date.now()\n  } = data\n  \n  // Creating \"Active Cases\" custom data field\n  const calculateActiveCases = (confirmed-recovered-deaths)\n\n  // Ghana's COVID-19 statistics data for Doughnut Chart\n  const doughnutChartData =  {\n    labels: [\"Confirmed\", \"Recovered\",\"Deaths\"],\n    datasets: [{\n        data: [confirmed, recovered, deaths],\n        backgroundColor: [\n        \"#0090e7\",\"#00d25b\",\"#fc424a\"\n        ]\n      }\n    ]\n  };\n\n  // Ghana's COVID-19 statistics data for Bar Graph\n  const barGraphData = {\n    labels: [\"Confirmed\", \"Recovered\", \"Critical\", \"Deaths\"],\n    datasets: [{\n      label: '#',\n      data: [confirmed, recovered, critical, deaths],\n      backgroundColor: [\n        '#0090e7',\n        '#00d25b',\n        '#ffab00',\n        '#fc424a'\n      ],\n      borderWidth: 0,\n      fill: false\n    }]\n  };\n\n  // Bar Graph Options Config\n  const barGraphOptions = {\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        },\n        gridLines: {\n          color: \"rgba(204, 204, 204,0.1)\"\n        }\n      }],\n      xAxes: [{\n        gridLines: {\n          color: \"rgba(204, 204, 204,0.1)\"\n        }\n      }]\n    },\n    legend: {\n      display: false\n    },\n    elements: {\n      point: {\n        radius: 0\n      }\n    }\n  }\n\n  // Doughnut Chart Options Config\n  const doughnutChartOptions = {\n    responsive: true,\n    maintainAspectRatio: true,\n    segmentShowStroke: false,\n    cutoutPercentage: 70,\n    elements: {\n      arc: {\n          borderWidth: 0\n      }\n    },      \n    legend: {\n      display: false\n    },\n    tooltips: {\n      enabled: true\n    }\n  }\n\n  return (\n      <div>\n        <div className=\"row\">\n         { /** Confirmed Cases Card */}\n         <DataCard\n            category=\"Confirmed Cases\"\n            data={confirmed}\n            icon=\"mdi mdi-account-multiple icon-item\"\n            iconColor=\"icon icon-box-primary\"\n         />\n         { /** Recovered Cases Card */}\n         <DataCard\n            category=\"Recovered\"\n            data={recovered}\n            icon=\"mdi mdi-human-handsup icon-item\"\n            iconColor=\"icon icon-box-success\"\n         />\n         { /** Critical Cases Card */}\n         <DataCard\n            category=\"Critical\"\n            data={critical}\n            icon=\"mdi mdi-hotel icon-item\"\n            iconColor=\"icon icon-box-warning\"\n         />\n        { /** Deaths Card */}\n         <DataCard\n            category=\"Deaths\"\n            data={deaths}\n            icon=\"mdi mdi-hospital icon-item\"\n            iconColor=\"icon icon-box-danger\"\n         />\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-4 grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">Ghana's COVID-19 Statistics</h4>\n                <div className=\"aligner-wrapper\">\n                  <Doughnut data={doughnutChartData} options={doughnutChartOptions} />\n                  <div className=\"absolute center-content\">\n                    <h5 className=\"font-weight-normal text-white text-center mb-2 text-white\">\n                      <NumberFormat value={calculateActiveCases} displayType={'text'} thousandSeparator={true} />\n                    </h5>\n                    <p className=\"text-small text-muted text-center mb-0\">Total Active</p>\n                  </div>\n                </div>  \n                <div className=\"bg-gray-dark d-flex d-md-block d-xl-flex flex-row py-3 px-4 px-md-3 px-xl-4 rounded mt-3\">\n                  <div className=\"text-md-center text-xl-left\">\n                    <h6 className=\"mb-1\">Data Last Changed</h6>\n                    <p className=\"text-muted mb-0\">\n                      <Moment format=\"DD MMM YYYY, hh:mm A\">{lastChange}</Moment>\n                    </p>\n                  </div>\n                </div>\n                <div className=\"bg-gray-dark d-flex d-md-block d-xl-flex flex-row py-3 px-4 px-md-3 px-xl-4 rounded mt-3\">\n                  <div className=\"text-md-center text-xl-left\">\n                    <h6 className=\"mb-1\">Data Last Update</h6>\n                    <p className=\"text-muted mb-0\">\n                      <Moment format=\"DD MMM YYYY, hh:mm A\">{lastUpdate}</Moment>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-8 grid-margin stretch-card\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"d-flex flex-row justify-content-between\">\n                  <h4 className=\"card-title mb-1\">Ghana's COVID-19 Statistics Bar Graph</h4>\n                  <p className=\"text-muted mb-1\">\n                    Last Update: <Moment format=\"DD MMM YYYY, hh:mm A\">{lastUpdate}</Moment>\n                  </p>\n                </div>\n                 <div className=\"card\">\n                   <div className=\"card-body\">\n                   <Bar data={barGraphData} options={barGraphOptions} />    \n                 </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n       <ToastContainer />\n     </div> \n   );\n}\n\nexport default Dashboard;","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n// Import Dashboard Component\nimport Dashboard from './dashboard/Dashboard';\n\nconst App = () =>  {\n  return (\n      <Router>\n          <div className=\"content-wrapper\">\n            <Switch>\n               <Route exact path=\"/\" component={ Dashboard } />\n            </Switch>\n          </div>\n     </Router>\n   )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();"],"sourceRoot":""}